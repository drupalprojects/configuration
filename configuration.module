<?php

/**
 * A bit flag used to let us know if a configuration is the same in both the
 * activestore and the datastore.
 */
define('CONFIGURATION_IN_SYNC', 0x0000);

/**
 * A bit flag used to let us know if a configuration was overridden as a result
 * of changing the activestore directly. (config changes via the UI)
 */
define('CONFIGURATION_ACTIVESTORE_OVERRIDDEN', 0x0001);

/**
 * A bit flag used to let us know if a configuration is not currently being
 * tracked.
 */
define('CONFIGURATION_ACTIVESTORE_ONLY', 0X0200);

/**
 * A bit flag used to let us know if a configuration is only in the datastore.
 */
define('CONFIGURATION_DATASTORE_ONLY', 0x0008);

/**
 * A bit flag used to let us know if a configuration needs to be rebuilded.
 */
define('CONFIGURATION_NEEDS_REBUILD', 0x0010);

/**
 * A bit flag used to let us know if a module for the configuration is not
 * available to install in the site.
 */
define('CONFIGURATION_MODULE_MISSING', 0x0100);

/**
 * A bit flag used to let us know if a module for the configuration is disabled
 * but can be enabled.
 */
define('CONFIGURATION_MODULE_TO_INSTALL', 0x0101);

/**
 * A bit flag used to let us know if a module for the configuration is installed.
 */
define('CONFIGURATION_MODULE_INSTALLED', 0x0102);

use Drupal\configuration\Config\Configuration;

/**
 * Implements hook_stream_wrappers().
 */
function configuration_stream_wrappers() {
  return array(
    'config' => array(
      'name' => t('Configuration files'),
      'class' => 'ConfigurationStreamWrapper',
      'description' => t('Configuration files export directory.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
  );
}

/**
 * Implements hook_configuration_handlers().
 */
function configuration_configuration_handlers() {
  $namespace = 'Drupal\configuration\Config';
  $handlers = array(
    'content_type' => array(
      'name' => 'Content Types',
      'handler' => 'ContentTypeConfiguration',
      'namespace' => $namespace,
    ),
    'field' => array(
      'name' => 'Fields',
      'handler' => 'FieldConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
    'image_style' => array(
      'name' => 'Image Styles',
      'handler' => 'ImageStyleConfiguration',
      'namespace' => $namespace,
    ),
    'text_format' => array(
      'name' => 'Text Formats',
      'handler' => 'TextFormatConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
    'vocabulary' => array(
      'name' => 'Vocabulary',
      'handler' => 'VocabularyConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
    'variable' => array(
      'name' => 'Variable',
      'handler' => 'VariableConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
    'permission' => array(
      'name' => 'Permission',
      'handler' => 'PermissionConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
    'menu' => array(
      'name' => 'Menu',
      'handler' => 'MenuConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
    'menulink' => array(
      'name' => 'MenuLink',
      'handler' => 'MenuLinkConfiguration',
      'namespace' => $namespace,
      'without_default_hook' => TRUE,
    ),
  );

  if (module_exists('views')) {
    $handlers['view'] = array(
      'name' => 'View',
      'handler' => 'ViewConfiguration',
      'namespace' => $namespace,
    );
  }

  return $handlers;
}

/**
 * Implements hook_flush_caches().
 */
function configuration_flush_caches() {
  configuration_rebuild();
}

/**
 * Export a configuration to the datastore.
 *
 * @param $component
 *   The name of the component to export, i.e, 'content_type',
 *   'field', 'variable', 'permission', etc.
 * @param $identifier
 *   The identifier of the configurarion. Some examples:
 *   For $component == 'content_type', $identifier = 'article'
 *   For $component == 'field', $identifier 'node.article.field_image'
 *   For $component == 'variable', $identifier = 'comment_controls_article'
 */
function configuration_export_to_datastore($component, $identifier, $export_dependencies = TRUE, $export_optionals = TRUE) {
  $handler = Configuration::getConfigurationHandler($component);
  $configuration = new $handler($identifier);
  $exported = array();
  $configuration->exportToDataStore($exported, $export_dependencies, $export_optionals);
  return $exported;
}

/**
 * Backup a configuration into the staging area.
 *
 * @param $component
 *   The name of the component to backup, i.e, 'content_type',
 *   'field', 'variable', 'permission', etc.
 * @param $identifier
 *   The identifier of the configurarion. Some examples:
 *   For $component == 'content_type', $identifier = 'article'
 *   For $component == 'field', $identifier 'node.article.field_image'
 *   For $component == 'variable', $identifier = 'comment_controls_article'
 */
function configuration_backup_to_staging($component, $identifier, $backup_dependencies = TRUE, $backup_optionals = TRUE) {
  $handler = Configuration::getConfigurationHandler($component);
  $configuration = new $handler($identifier);
  $backuped = array();
  $configuration->backupConfiguration($backuped, $backup_dependencies, $backup_optionals);
  return $backuped;
}

/**
 * Returns a list of identifiers for a specific component.
 *
 * @param $component
 *   The name of the component to export, i.e, 'content_type',
 *   'field', 'variable', 'permission', etc.
 */
function configurarion_get_identifiers($component) {
  $handler = Configuration::getConfigurationHandler($component);
  if ($handler::multiComponent()) {
    $identifiers = $handler::getAllIdentifiers($component);
  }
  else {
    $identifiers = $handler::getAllIdentifiers();
  }
  return $identifiers;
}

/**
 * Returns a list of components that can be exported.
 */
function configurarion_get_handlers() {
  return Configuration::getAllConfigurationHandlers();
}

/**
 * Import a list of configurations from config:// into the staging area and into
 * the Active Store.
 */
function configuration_import_configurations($list = array()) {
  $handlers = configurarion_get_handlers();
  $components = array();
  foreach ($handlers as $handler) {
    $class = '\\' . $handler['namespace'] . '\\' . $handler['handler'];
    $components = array_merge($components, $class::scanDataStore());
  }
  Configuration::importConfigurations($components, $list);
  drupal_flush_all_caches();
}

/**
 * Load a list of configurations from config:// into the staging area.
 */
function configuration_load_configurations($list = array()) {
  $handlers = configurarion_get_handlers();
  $components = array();
  foreach ($handlers as $handler) {
    $class = '\\' . $handler['namespace'] . '\\' . $handler['handler'];
    $components = array_merge($components, $class::scanDataStore());
  }
  $to_load = Configuration::importConfigurations($components, $list, TRUE, TRUE, FALSE);
  foreach ($to_load as $config) {
    $config->saveToStaging();
  }
}

/**
 * Revert the configuration components using the values saved in the staging.
 */
function configuration_revert_configurations($list = array()) {
  $from_staging = db_select('configuration_staging', 'c')
        ->fields('c', array('component', 'identifier'))
        ->execute()
        ->fetchAll();

  $components = array();
  foreach ($from_staging as $object) {
    $id = $object->component . '.' . $object->identifier;
    $components[$id] = $id;
  }

  $handlers = configurarion_get_handlers();
  $reverted = Configuration::revertConfigurations($components, $list);
  drupal_flush_all_caches();
  return $reverted;
}

/**
 * @defgroup hooks Hooks for configurations from code
 * @{
 * Definition of hooks to load configurations from code.
 */

/**
 * Loads the configurations that are not provided by hook_*_default_*()
 * functions.
 */
function configuration_rebuild() {
  $handlers = configurarion_get_handlers();
  foreach ($handlers as $handler) {
    if (!empty($handler['without_default_hook'])) {
      $class = '\\' . $handler['namespace'] . '\\' . $handler['handler'];
      $class::executeRebuildHook();
    }
  }
}

/**
 * Implements hook_node_info().
 */
function configuration_node_info() {
  return \Drupal\configuration\Config\ContentTypeConfiguration::defaultHook();
}

/**
 * Implements hook_image_default_styles().
 */
function configuration_image_default_styles() {
  return \Drupal\configuration\Config\ImageStyleConfiguration::defaultHook();
}

/**
 * Implements hook_filter_default_formats().
 */
function configuration_filter_default_formats() {
  return \Drupal\configuration\Config\TextFormatConfiguration::defaultHook();
}

/**
 * Implements hook_views_api().
 */
function configuration_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * Implements hook_filter_default_formats().
 */
function configuration_views_default_views() {
  return \Drupal\configuration\Config\ViewConfiguration::defaultHook();
}

/**
 * @} End of "defgroup hooks".
 */
