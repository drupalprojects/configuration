<?php

/**
 * User permission component tests for Features
 */
class ConfigurationWebTestCase extends DrupalWebTestCase {

  /**
   * Track Configurations
   */
  function trackConfigurations() {

    $roles = user_roles();

    $edit = array();
    $edit["field[items][node-" . $this->type->type . "-body]"] = 1;
    $edit["filter[items][filtered_html]"] = 1;
    // Need to create an image preset to store in activestore.
    $edit["image[items][large]"] = 1;
    $edit["node[items][" . $this->type->type . "]"] = 1;
    $edit["taxonomy[items][" . $this->vocab->machine_name . "]"] = 1;
    $edit["user_permission[items][access configuration management]"] = 1;
    $edit["user_role[items][" . $roles[3] . "]"] = 1;

    $this->tracked = $edit;
    $this->drupalPost('admin/config/system/configuration/notracking', $edit, t('Write to Datastore'));

    // After start traking configurations, a file should be created by each component.
    $types = array('field', 'filter', 'user_permission', 'user_role', 'taxonomy');
    foreach ($types as $type) {
      $config_file_exists = file_exists($this->datastore_path . '/configuration.' . $type . '.inc');
      $this->assertTrue($config_file_exists, "Configuration file for $type was created.");
    }
    // Nodes and images styles are saved into configuration.inc
    $config_file_exists = file_exists($this->datastore_path . '/configuration.inc');
    $this->assertTrue($config_file_exists, "Configuration file for nodes and image styles was created.");

    $this->assertResponse(200);
  }

  /**
   * Returns a new vocabulary with random properties.
   */
  function createVocabulary() {
    // Create a vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = $this->randomName();
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = drupal_strtolower($this->randomName());
    $vocabulary->help = '';
    $vocabulary->nodes = array('article' => 'article');
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }

  function setUp($modules = array()) {
    parent::setUp($modules);
    //Generate an unique path for this test based on the database prefix.
    $this->datastore_path = file_directory_temp();

    variable_set('configuration_config_path', $this->datastore_path);
    $this->verbose('Saving configurations into: ' . $this->datastore_path);
    file_prepare_directory(variable_get('configuration_config_path', $this->datastore_path));

    // Use the administration interface so config:// is correctly set up.
    $this->adminLogin();
    $edit = array();
    $edit["configuration_config_path"] = $this->datastore_path;
    $this->drupalPost('admin/config/system/configuration/settings', $edit, t('Save configuration'));
    $this->drupalLogout();
  }
  /**
   * Logs in as an administrative user. If $this->admin_user is empty, it
   * creates a new admin user with the given $permissions.
   *
   * @param array $permissions an array of permissions for the admin user.
   */
  public function adminLogin($permissions = NULL) {
    if ($permissions == NULL) {
      $permissions = array(
        'administer content types',
        'access administration pages',
        'access configuration management',
        'administer modules',
        'administer site configuration'
      );
    }

    $this->admin_user = $this->drupalCreateUser($permissions);

    $this->drupalLogin($this->admin_user);
  }
}
class ConfigurationTrackingTest extends ConfigurationWebTestCase {
  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Test tracking interface'),
      'description' => t('Test choosing configurations to track.') ,
      'group' => t('Configuration'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp(array(
      'configuration',
      'field',
      'filter',
      'image',
      'taxonomy',
    ));

    $this->adminLogin();
    $this->type = $this->drupalCreateContentType();
    $this->vocab = $this->createVocabulary();
  }

  public function testTracking() {
    $this->trackConfigurations();

    $types = array('field', 'filter', 'image', 'node', 'user_permission', 'user_role', 'taxonomy');
    foreach ($types as $type) {
      $this->assertRaw(t('Tracking configurations for %type have been saved', array('%type' => $type)));

      if (!in_array($type, array('node', 'image'))) {
        $this->assertRaw(t('Wrote %type to filesystem', array('%type' => 'configuration.' . $type . '.inc')));
      }
    }

    // Test that the options being tracked are no longer in list for stuff not
    // being tracked.
    $this->drupalGet('admin/config/system/configuration/notracking');
    foreach ($this->tracked as $field => $value) {
      $this->assertNoField($field);
    }
  }
}

class ConfigurationActiveStoreOverriddenTest extends ConfigurationWebTestCase {
  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Active store overridden test'),
      'description' => t('Test that configurations that are overridden while being tracked, update status.') ,
      'group' => t('Configuration'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp(array(
      'configuration',
      'field',
      'filter',
      'image',
      'taxonomy',
    ));

    $this->adminLogin(array(
      'administer content types',
      'access administration pages',
      'access configuration management',
      'administer modules',
      'administer site configuration',
      'administer filters',
      'administer permissions',
      'administer users',
      'administer image styles',
    ));

    $this->type = $this->drupalCreateContentType();
    $this->vocab = $this->createVocabulary();
  }

  function testOverridden() {
    $this->trackConfigurations();

    $configuration_needs_saving_text = t('Configurations are out of sync and need to be either !write.', array('!write' => l(t('activated or written to file'), 'admin/config/system/configuration/tracking')));



    // @todo: Fix #1664772 beforre uncomment the following tests:
    //
    // Overide for fields works, but revert doesn't, For this reason
    // the system always says that the configurations are out of sync.
    // The main isue is here: http://drupal.org/node/1664772
    //
    // Testing overridding a field
    // $edit = array();
    // $edit["instance[widget][settings][rows]"] = 2;
    // $this->drupalPost('admin/structure/types/manage/' . $this->type->type . '/fields/body', $edit, t('Save settings'));
    // $this->assertRaw($configuration_needs_saving_text);
    //
    // $status = configuration_get_status('field', 'node-' . $this->type->type . '-body');
    // $this->assertEqual($status, CONFIGURATION_ACTIVESTORE_OVERRIDDEN);
    //
    // // Testing putting the field back to default
    // $edit = array();
    // $edit["instance[widget][settings][rows]"] = 20;
    // $this->drupalPost('admin/structure/types/manage/' . $this->type->type . '/fields/body', $edit, t('Save settings'));
    // $this->assertNoRaw($configuration_needs_saving_text);
    // $status = configuration_get_status('field', 'node-' . $this->type->type . '-body');
    // $this->assertEqual($status, CONFIGURATION_IN_SYNC);

    // Testing overriding filters
    $edit = array();
    $edit["filters[filter_url][settings][filter_url_length]"] = 20;
    $this->drupalPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));
    $this->assertRaw($configuration_needs_saving_text, t('Activestore overriden for Filters'));
    $status = configuration_get_status('filter', 'filtered_html');
    $this->assertEqual($status, CONFIGURATION_ACTIVESTORE_OVERRIDDEN);

    // Testing filters back to default
    $edit = array();
    $edit["filters[filter_url][settings][filter_url_length]"] = 72;
    $this->drupalPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));
    $this->assertNoRaw($configuration_needs_saving_text, t('Activestore in sync for Filters'));
    $status = configuration_get_status('filter', 'filtered_html');
    $this->assertEqual($status, CONFIGURATION_IN_SYNC);

    // Testing overriding filters
    $edit = array();
    $edit["filters[filter_url][settings][filter_url_length]"] = 20;
    $this->drupalPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));
    $this->assertRaw($configuration_needs_saving_text, t('Activestore overriden for Filters'));
    $status = configuration_get_status('filter', 'filtered_html');
    $this->assertEqual($status, CONFIGURATION_ACTIVESTORE_OVERRIDDEN);

    // Testing filters back to default
    $edit = array();
    $edit["filters[filter_url][settings][filter_url_length]"] = 72;
    $this->drupalPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));
    $this->assertNoRaw($configuration_needs_saving_text, t('Activestore in sync for Filters'));
    $status = configuration_get_status('filter', 'filtered_html');
    $this->assertEqual($status, CONFIGURATION_IN_SYNC);

    // Testing overriden user permissions
    $edit = array();
    $edit['2[access configuration management]'] = TRUE;
    $this->drupalPost('admin/people/permissions', $edit, t('Save permissions'));
    $this->assertRaw($configuration_needs_saving_text, t('Activestore overriden for User Permissions'));
    $status = configuration_get_status('user_permission', 'access configuration management');
    $this->assertEqual($status, CONFIGURATION_ACTIVESTORE_OVERRIDDEN);

    // Testing user permissions back to default
    $edit = array();
    $edit['2[access configuration management]'] = FALSE;
    $this->drupalPost('admin/people/permissions', $edit, t('Save permissions'));
    $this->assertNoRaw($configuration_needs_saving_text, t('Activestore in sync for User Permissions'));
    $status = configuration_get_status('user_permission', 'access configuration management');
    $this->assertEqual($status, CONFIGURATION_IN_SYNC);

    // Testing overriden image styles
    $edit = array();
    // First unlock the image style
    $this->drupalPost('admin/config/media/image-styles/edit/large', $edit, t('Override defaults'));
    $edit = array();
    $edit['data[width]'] = '400';
    $this->drupalPost('admin/config/media/image-styles/edit/large/effects/1', $edit, t('Update effect'));
    $this->assertRaw($configuration_needs_saving_text, t('Activestore overriden for Image Styles'));
    $status = configuration_get_status('image', 'large');
    $this->assertEqual($status, CONFIGURATION_ACTIVESTORE_OVERRIDDEN);

    // Testing image styles back to default
    $edit = array();
    $this->drupalPost('admin/config/media/image-styles/revert/large', $edit, t('Revert'));
    $this->assertNoRaw($configuration_needs_saving_text, t('Activestore in sync for Image Styles'));
    $status = configuration_get_status('image', 'large');
    $this->assertEqual($status, CONFIGURATION_IN_SYNC);
  }
}
