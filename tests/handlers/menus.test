<?php

/**
 * @file
 * Tests for Configuration Management: Menus.
 */

use Drupal\configuration\Config\ConfigurationManagement;

/**
 * Base class for functional tests for configuration management.
 */
class ConfigurationHandlerMenuTestCase extends ConfigurationWebTestCase {

  // Use the minimal profile, to avoid create the content type that will be
  // imported
  protected $profile = 'minimal';

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Handler: Menus'),
      'description' => t('Test the configuration API for menu configurations'),
      'group' => t('Configuration'),
    );
  }

  /**
   * Implementation of DrupalWebTestCase::setUp().
   */
  public function setUp($modules = array()) {
    global $base_url;

    if (empty($modules)) {
      parent::setUp(array(
        'configuration',
        'menu',
      ));
    }
    else {
      parent::setUp($modules);
    }
  }

  public function testImportToActiveStore() {
    // Change the path from where the configurations are loaded.
    ConfigurationManagement::setStream(drupal_get_path('module', 'configuration') . '/tests/test_configs/');

    $config = 'menu.menu_test';
    $results = ConfigurationManagement::importToActiveStore(array($config), FALSE, FALSE);
    $imported = $results->getInfo('imported');
    $this->assertTrue(in_array($config, $imported), "Configuration for $config was imported.");

    $type_exists = db_query('SELECT 1 FROM {menu_custom} WHERE menu_name = :menu_name', array(':menu_name' => 'menu-test'))->fetchField();
    $this->assertTrue($type_exists, "The menu was saved in the ActiveStore.");
  }

  public function testExportToDataStore() {
    variable_set('configuration_config_path', $this->datastore_path);
    $config_path = variable_get('configuration_config_path', $this->datastore_path);
    file_prepare_directory($config_path);

    ConfigurationManagement::setStream($config_path);

    $menu = array(
      'menu_name' => 'menu-drupal',
      'title' => 'My menu',
      'description' => 'This is my menu',
    );
    menu_save($menu);
    $type_exists = db_query('SELECT 1 FROM {menu_custom} WHERE menu_name = :menu_name', array(':menu_name' => 'menu-drupal'))->fetchField();
    $this->assertTrue($type_exists, "The menu was saved in the ActiveStore.");

    $config = 'menu.menu_drupal';
    $results = ConfigurationManagement::exportToDataStore(array($config), FALSE, FALSE);
    $exported = $results->getInfo('exported');
    $this->assertTrue(in_array($config, $exported), "Configuration for $config was exported.");

    $file_for_config = $config_path . $config . '.inc';

    $this->assertTrue(file_exists($file_for_config), "The file that storages the menu was created.");
  }

  public function testCheckModifications() {
    // Change the path from where the configurations are loaded.
    ConfigurationManagement::setStream(drupal_get_path('module', 'configuration') . '/tests/test_configs/');
    $results = ConfigurationManagement::importToActiveStore(array('menu.menu_test'), FALSE, FALSE, TRUE);

    drupal_flush_all_caches();
    $type_exists = db_query('SELECT 1 FROM {menu_custom} WHERE menu_name = :menu_name', array(':menu_name' => 'menu-test'))->fetchField();
    $this->assertTrue($type_exists, "The menu was saved in the ActiveStore.");

    $menu = ConfigurationManagement::createConfigurationInstance('menu.menu_test');
    $initial_hash = $menu->loadFromActiveStore()->buildHash()->getHash();

    $object = db_select('configuration_staging', 'cs')
                        ->fields('cs')
                        ->condition('component', 'menu')
                        ->condition('identifier', 'menu_test')
                        ->execute()
                        ->fetchObject();
    $this->assertTrue(!empty($object), 'The menu was suscessfully tracked.');

    $menu_data = array(
      'menu_name' => 'menu-test',
      'title' => 'Modified',
      'description' => 'Modified',
    );
    menu_save($menu_data);

    $modified_hash = $menu->loadFromActiveStore()->buildHash()->getHash();
    $this->assertFalse($initial_hash == $modified_hash, 'Menu hash is not the same after modify the menu.');
    $results = ConfigurationManagement::revertActiveStore(array('menu.menu_test'), FALSE, FALSE);

    $final_hash = $menu->loadFromActiveStore()->buildHash()->getHash();
    $this->assertTrue($initial_hash == $final_hash, 'Menu hash is the same after modify the menu.');
    drupal_flush_all_caches();

  }

}
