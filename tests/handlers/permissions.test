<?php

/**
 * @file
 * Tests for Configuration Management: Permissions.
 */

use Drupal\configuration\Config\ConfigurationManagement;

/**
 * Base class for functional tests for configuration management.
 */
class ConfigurationHandlerPermissionTestCase extends ConfigurationWebTestCase {

  protected $profile = 'minimal';

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Handler: Permissions'),
      'description' => t('Test the configuration API for permissions configurations'),
      'group' => t('Configuration'),
    );
  }

  /**
   * Implementation of DrupalWebTestCase::setUp().
   */
  public function setUp($modules = array()) {
    global $base_url;

    if (empty($modules)) {
      parent::setUp(array(
        'configuration',
      ));
    }
    else {
      parent::setUp($modules);
    }
  }

  public function testImportToActiveStore() {

    // Create a Developer Role
    $developer_rid = $this->drupalCreateRole(array(), 'developer');

    // Change the path from where the configurations are loaded.
    ConfigurationManagement::setStream(drupal_get_path('module', 'configuration') . '/tests/test_configs/');
    $config = 'permission.administer_content_types';
    $results = ConfigurationManagement::importToActiveStore(array($config), FALSE, FALSE);
    $imported = $results->getInfo('imported');
    $this->assertTrue(in_array($config, $imported), "Configuration for $config was imported.");

    // After import the permission, the developer role should have permissions
    // to administer content types.
    $permission_exist = $this->canDevelopersAdministerContentTypes($developer_rid);
    $this->assertTrue($permission_exist, "Users of role developer can administer content types.");
  }

  public function testExportToDataStore() {
    variable_set('configuration_config_path', $this->datastore_path);
    $config_path = variable_get('configuration_config_path', $this->datastore_path);
    file_prepare_directory($config_path);

    ConfigurationManagement::setStream($config_path);

    $config = 'permission.administer_content_types';
    $results = ConfigurationManagement::exportToDataStore(array($config), FALSE, FALSE);
    $exported = $results->getInfo('exported');
    $this->assertTrue(in_array($config, $exported), "Configuration for $config was exported.");

    $file_for_config = $config_path . $config . '.inc';

    $this->assertTrue(file_exists($file_for_config), "The file that storages the permission was created.");
  }

  public function testCheckModifications() {

    // Create a Developer Role
    $developer_rid = $this->drupalCreateRole(array(), 'developer');

    // Change the path from where the configurations are loaded.
    ConfigurationManagement::setStream(drupal_get_path('module', 'configuration') . '/tests/test_configs/');
    $results = ConfigurationManagement::importToActiveStore(array('permission.administer_content_types'), FALSE, FALSE, TRUE);

    $object = db_select('configuration_staging', 'cs')
                        ->fields('cs')
                        ->condition('component', 'permission')
                        ->condition('identifier', 'administer_content_types')
                        ->execute()
                        ->fetchObject();

    $this->assertTrue(!empty($object), 'The permission was suscessfully tracked.');

    // The permissions must be defined for the role developer.
    $original_value = $this->canDevelopersAdministerContentTypes($developer_rid);

    $web_user = $this->drupalCreateUser(
      array(
        'administer permissions',
      )
    );
    $this->drupalLogin($web_user);

    // Now disable the ability to administer content types for developers.
    $edit = array();
    $edit[$developer_rid . '[administer content types]'] = FALSE;
    $this->drupalPost('admin/people/permissions', $edit, t('Save permissions'));

    $current_value = $this->canDevelopersAdministerContentTypes($developer_rid);


    $this->assertTrue(empty($current_value), 'Developers cannot administer content types.');

    $results = ConfigurationManagement::revertActiveStore(array('permission.administer_content_types'), FALSE, FALSE);

    $current_value = $this->canDevelopersAdministerContentTypes($developer_rid);

    $this->assertEqual($original_value, $current_value, 'The permission was suscessfully reverted.');
  }

  protected function canDevelopersAdministerContentTypes($developer_rid) {
    return db_query('SELECT 1 FROM {role_permission} WHERE permission = :permission AND rid = :rid',
      array(
        ':permission' => 'administer content types',
        ':rid' => $developer_rid,
      )
    )->fetchField();
  }

}
