<?php

/**
 * @file
 * Install, update and uninstall functions for the configuration module.
 */

/**
 * Implements hook_schema().
 */
function configuration_schema() {
  $schema['configuration_staging'] = array(
    'description' => 'Default active store for the configuration system.',
    'fields' => array(
      'component' => array(
        'description' => 'The component that this configuration belongs).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'identifier' => array(
        'description' => 'The identifier for the configuration entry, such as module.example (the name of the file, minus the file extension and the component).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
     'hash' => array(
        'description' => 'A sha1 hash that respresent the configuration. Used to track differences between the ActiveStore, DataStore and Staging area.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'The raw data for this configuration entry.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'dependencies' => array(
        'description' => 'An array of required configurations to load this configuration',
        'type' => 'text',
        'not null' => TRUE,
        'serialized' => TRUE,
      ),
      'optional' => array(
        'description' => 'An array of optional configurations that work with this configuration',
        'type' => 'text',
        'not null' => TRUE,
        'serialized' => TRUE,
      ),
      'modules' => array(
        'description' => 'An array of modules to load this configuration',
        'type' => 'text',
        'not null' => TRUE,
        'serialized' => TRUE,
      ),
    ),
    'primary key' => array('component' , 'identifier'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function configuration_install() {
  $directory = variable_get('configuration_config_path', conf_path() . '/files/config');
  if (!is_dir($directory) && !drupal_mkdir($directory, NULL, TRUE)) {
    // If the directory does not exists and cannot be created.
    drupal_set_message(st('The directory %directory does not exist and could not be created.', array('%directory' => $directory)), 'error');
    watchdog('file system', 'The directory %directory does not exist and could not be created.', array('%directory' => $directory), WATCHDOG_ERROR);
  }
  if (is_dir($directory) && !is_writable($directory) && !drupal_chmod($directory)) {
    // If the directory is not writable and cannot be made so.
    drupal_set_message(st('The directory %directory exists but is not writable and could not be made writable.', array('%directory' => $directory)), 'error');
    watchdog('file system', 'The directory %directory exists but is not writable and could not be made writable.', array('%directory' => $directory), WATCHDOG_ERROR);
  }
  elseif (is_dir($directory)) {
    file_create_htaccess($directory);
  }
}
